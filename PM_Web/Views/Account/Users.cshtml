@model IEnumerable<PM.Models.ViewModels.User>

@{
    ViewData["Title"] = "Users";
}

<div class="container mt-4">
    <div class="row mb-3">
        <div class="col">
            <hr />
            <form id="filterForm" asp-action="Users" method="get" class="form-inline">
                <div class="btn-group mb-2" role="group" aria-label="projectId">
                    <button type="button" class="btn btn-outline-primary" data-filter="projectId" data-value="" onclick="applyFilter('projectId', '')">All projects</button>
                    @foreach (var item in ViewBag.projects)
                    {
                        <button type="button" class="btn btn-outline-primary" data-filter="projectId" data-value="item.Text" onclick="applyFilter('projectId', '@item.Value')">@item.Text</button>
                    }
                </div>
            </form>
            <hr />
        </div>
    </div>
</div>

<div class="container">
    <div class="card shadow-lg mt-5">
        <div class="card-header bg-primary text-white">
            <h3 class="text-center mb-0">Team Members</h3>
        </div>
        <div class="card-body p-4">
            <table class="table table-bordered table-hover">
                <thead class="thead-light">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Password</th>
                    <th scope="col">Role</th>
                </tr>
                </thead>
                <tbody>
                @if (!Model.Any())
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted">No team members found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var member in Model.Select((value, index) => new { value, index }))
                    {
                        <tr>
                            <th scope="row">@(member.index + 1)</th>
                            <td>@member.value.Name</td>
                            <td>@member.value.Email</td>
                            <td>@member.value.Password</td>
                            <td>@member.value.Role</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
        <a asp-controller="Home" asp-action="Index" class="btn btn-secondary btn-sm mt-3">Back to Home</a>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap4.min.js" crossorigin="anonymous"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css" />

    <script>
        $(document).ready(function () {
            applyButtonStyles();

            function applyButtonStyles() {
                const urlParams = new URLSearchParams(window.location.search);
                const filters = ['status', 'role', 'scopePackage'];
                filters.forEach(filter => {
                    const value = urlParams.get(filter);
                    if (value) {
                        $(`button[data-filter="${filter}"]`).removeClass('btn-primary').addClass('btn-outline-primary');
                        $(`button[data-filter="${filter}"][data-value="${value}"]`).removeClass('btn-outline-primary').addClass('btn-primary');
                    }
                });
            }
        });

        function applyFilter(filter, value) {
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(filter, value);
            window.location.search = urlParams.toString();
        }
    </script>
}
