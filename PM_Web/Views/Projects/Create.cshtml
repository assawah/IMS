@model PM.Models.ViewModels.ProjectViewModel

@{
    ViewData["Title"] = "Create Project";
}


<div class="container">
    <h2 class="text-center mt-4">@ViewData["Title"]</h2>

    <div class="row justify-content-center mt-5">
        <div class="col-md-8">
            <div class="card shadow border-0">
                <div class="card-body p-4">
                    <form asp-action="Create" method="post" id="createForm" class="row needs-validation" novalidate>
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                        <div class="form-group mb-3 col-md-6">
                            <label asp-for="ProjectName" class="control-label font-weight-bold"></label>
                            <input asp-for="ProjectName" class="form-control form-control-lg" placeholder="project name" />
                            <span asp-validation-for="ProjectName" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3 col-md-6">
                            <label asp-for="Location" class="control-label font-weight-bold"></label>
                            <input asp-for="Location" class="form-control form-control-lg" placeholder="location" />
                            <span asp-validation-for="Location" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3 col-md-6">
                            <label asp-for="JVPartners" class="control-label font-weight-bold"></label>
                            <input asp-for="JVPartners" class="form-control form-control-lg" placeholder="number of JV partners" />
                            <span asp-validation-for="JVPartners" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3 col-md-6">
                            <label asp-for="ProjectValue" class="control-label font-weight-bold"></label>
                            <input asp-for="ProjectValue" class="form-control form-control-lg" placeholder="project value" />
                            <span asp-validation-for="ProjectValue" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3 col-md-6">
                            <label asp-for="ContractingStrategies" class="control-label font-weight-bold"></label>
                            <input asp-for="ContractingStrategies" class="form-control form-control-lg" placeholder="Contracting Strategies" />
                            <span asp-validation-for="ContractingStrategies" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="ProjectNature" class="form-label">Nature</label>
                            <select asp-for="ProjectNature" class="form-control form-control-lg">
                                <option value="">--Select--</option>
                                <option value="greenfield">greenfield</option>
                                <option value="brownfield">brownfield</option>
                            </select>
                            <span asp-validation-for="ProjectNature" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="ProjectType" class="form-label">Type</label>
                            <select asp-for="ProjectType" class="form-control form-control-lg">
                                <option value="">--Select--</option>
                                <option value="including chemical manufacturing">including chemical manufacturing</option>
                                <option value="stadium">stadium</option>
                                <option value="museum">museum</option>
                                <option value="dam">dam</option>
                                <option value="highway">highway</option>
                                <option value="power generation">power generation</option>
                                <option value="water/wastewater">water/wastewater</option>
                                <option value="consumer products manufacturing">consumer products manufacturing</option>
                                <option value="oil refining">oil refining</option>
                                <option value="metals refining/processing">metals refining/processing</option>
                                <option value="oil exploration/production">oil exploration/production</option>
                                <option value="construction">construction</option>
                                <option value="infrastructure">infrastructure</option>
                                <option value="road">road</option>
                            </select>
                            <span asp-validation-for="ProjectType" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="ProjectStage" class="form-label">Stage</label>
                            <select asp-for="ProjectStage" class="form-control form-control-lg">
                                <option value="">--Select--</option>
                                <option value="ongoing">ongoing</option>
                                <option value="including Front End planning">including Front End planning</option>
                                <option value="Design">Design</option>
                                <option value="Procurement">Procurement</option>
                                <option value="Construction">Construction</option>
                                <option value="completed">completed</option>
                            </select>
                            <span asp-validation-for="ProjectStage" class="text-danger"></span>
                        </div>



                        <div class="form-group mb-3">
                            <label asp-for="DeliveryStrategies" class="form-label">Delivery Strategy</label>
                            <select asp-for="DeliveryStrategies" class="form-control form-control-lg">
                                <option value="">--Select--</option>
                                <option value="Design, Bid, Build (DBB)">Design, Bid, Build (DBB)</option>
                                <option value="Design, Build (DB)">Design, Build (DB)</option>
                                <option value="procurement, construction (PC)">procurement, construction (PC)</option>
                                <option value="Engineering, Procurement, Construction (EPC)">Engineering, Procurement, Construction (EPC)</option>
                                <option value="Engineering, Procurement, Construction, Management (EPCM)">Engineering, Procurement, Construction, Management (EPCM)</option>
                                <option value="Construction">Construction</option>
                                <option value="Build, Own, Operate (BOO)">Build, Own, Operate (BOO)</option>
                            </select>
                            <span asp-validation-for="DeliveryStrategies" class="text-danger"></span>
                        </div>

                        <hr />

                        <div class="form-group mb-3">
                            <label class="control-label font-weight-bold">Owners</label>
                            <table class="table table-bordered">
                                <tbody id="ownersTable">
                                   
                                </tbody>
                            </table>
                            <button type="button" class="btn btn-primary" onclick="addOwnerRow()">Add Owner</button>
                        </div>
                        <hr />

                        <div class="form-group mb-3">
                            <label class="control-label font-weight-bold">Systems</label>
                            <table class="table table-bordered" id="systemsTable">
                                <tbody id="systemsBody">
                                  
                                </tbody>
                            </table>
                            <button type="button" class="btn btn-primary" onclick="addSystemRow()">Add System</button>
                        </div>

                        <hr />

                        <div class="form-group mb-3">
                            <label class="control-label font-weight-bold">Scope Packages</label>
                            <table class="table table-bordered">
                                <tbody id="scopePackagesTable">
                                   
                                </tbody>
                            </table>
                            <button type="button" class="btn btn-primary" onclick="addScopePackageRow()">Add Scope Package</button>
                        </div>
                        <hr />

                        <div class="form-group mb-3">
                            <label class="control-label font-weight-bold">Departments</label>
                            <table class="table table-bordered" >
                                <tbody id="departmentsTable">
                                   
                                </tbody>
                            </table>
                            <button type="button" class="btn btn-primary" onclick="addDepartmentRow()">Add Department</button>
                        </div>

                        <hr />

                        <div class="form-group mb-3">
                            <label class="control-label font-weight-bold">BOQs</label>
                            <div id="boqContainer">
                                <!-- BOQ groups will be dynamically added here -->
                            </div>
                            <table>
                                <tr>
                                    <td colspan="5" class="text-right font-weight-bold">Grand Total Cost:</td>
                                    <td><input id="grandTotalCost" class="form-control form-control-lg" readonly /></td>
                                    <td></td>
                                </tr>
                            </table>
                            <button type="button" class="btn btn-primary" onclick="createNewGroup()">Add New Group</button>
                        </div>


                        <hr />

                        <div class="form-group mb-3">
                            <label class="control-label font-weight-bold">Activities</label>
                            <div id="activityContainer">
                                <!-- Activity groups will be dynamically added here -->
                            </div>
                            <button type="button" class="btn btn-primary" onclick="createActivityGroup()">Add Activity Group</button>
                        </div>

                        <input type="hidden" name="ActivityDivisionsJson" id="ActivityDivisionsJson" />
                        <input type="hidden" name="BoqDivisionsJson" id="BoqDivisionsJson" />
                        <div class="form-group">
                            <button type="submit" class="btn btn-success btn-lg" onclick="submitForm()">Submit</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function addOwnerRow() {
            const rowIndex = $('#ownersTable tr').length;
            var row = `<tr>
                                                   <td>${rowIndex + 1}</td>
                                                   <td><input name="Owners[${rowIndex}]" class="form-control form-control-lg" placeholder="owner name" /></td>
                                           <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
                                       </tr>`;
            document.getElementById('ownersTable').insertAdjacentHTML('beforeend', row);
        }


        function addSystemRow() {
            const rowIndex = $('#systemsBody tr').length;
            var row = `<tr>
                                                       <td>${rowIndex + 1}</td>
                                                       <td><input name="Systems[${rowIndex}]" class="form-control form-control-lg" placeholder="system name" /></td>
                                       <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
                                   </tr>`;
            document.getElementById('systemsTable').querySelector('tbody').insertAdjacentHTML('beforeend', row);
        }

        function addScopePackageRow() {
            const rowIndex = $('#scopePackagesTable tr').length;
            var row = `<tr>
                                                           <td>${rowIndex + 1}</td>
                                                   <td><input name="ScopePackages[${rowIndex}].Name" class="form-control form-control-lg" placeholder="scope package name" /></td>
                                                   <td><input name="ScopePackages[${rowIndex}].InterfaceManager.Name" class="form-control form-control-lg" placeholder="manager name" /></td>
                                                   <td><input name="ScopePackages[${rowIndex}].InterfaceManager.Email" class="form-control form-control-lg" placeholder="email" /></td>
                                                   <td><input name="ScopePackages[${rowIndex}].InterfaceManager.Password" class="form-control form-control-lg" placeholder="password" /></td>
                                           <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
                                       </tr>`;
            document.getElementById('scopePackagesTable').insertAdjacentHTML('beforeend', row);
        }




        function addDepartmentRow() {
            const rowIndex = $('#departmentsTable tr').length;
            var row = `<tr>
                                                   <td>${rowIndex + 1}</td>
                                   <td><input name="Departments[${rowIndex}].Name" class="form-control form-control-lg" placeholder="department name" /></td>
                                   <td>                           
                                       <input name="Departments[${rowIndex}].TeamManager.Name" class="form-control form-control-lg" placeholder="manager name" />
                                       <input name="Departments[${rowIndex}].TeamManager.Email" class="form-control form-control-lg" placeholder="email" />
                                       <input name="Departments[${rowIndex}].TeamManager.Password" class="form-control form-control-lg" placeholder="password" />
                                   </td>
                                   <td>
                                       <button type="button" class="btn btn-primary" onclick="addTeamMember(this)">Add Team Member</button>
                                       <div class="team-members">
                                           <!-- Team members will be dynamically added here -->
                                       </div>
                                   </td>
                                   <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
                               </tr>`;
            document.getElementById('departmentsTable').insertAdjacentHTML('beforeend', row);
        }

        function addTeamMember(button) {
            const rowIndex = $('#departmentsTable tr').length;
            var departmentRow = button.closest('tr');
            var teamMembersDiv = departmentRow.querySelector('.team-members');

            var memberId = teamMembersDiv.children.length;

            var teamMemberHtml = `<div class="form-group">
                                            <input name="Departments[${rowIndex - 1}].TeamMembers[${memberId}].Name" class="form-control form-control-lg" placeholder="name" />
                                            <input name="Departments[${rowIndex - 1}].TeamMembers[${memberId}].Email" class="form-control form-control-lg" placeholder="email" />
                                            <input name="Departments[${rowIndex - 1}].TeamMembers[${memberId}].Password" class="form-control form-control-lg" placeholder="password" />
                                            <button type="button" class="btn btn-danger" onclick="removeTeamMember(this)">Remove</button>
                                          </div>`;

            teamMembersDiv.insertAdjacentHTML('beforeend', teamMemberHtml);
        }

        let boqDivisions = [];

        // Function to create a new group with a custom name
        function createNewGroup() {
            const groupName = prompt("Enter BOQ Group Name:");
            if (groupName) {
                const groupIndex = boqDivisions.length;
                boqDivisions.push({ name: groupName, boqs: [] });

                const container = document.getElementById('boqContainer');
                const newGroup = `
                    <button class="btn btn-link font-weight-bold" data-toggle="collapse" data-target="#boqGroup${groupIndex}" aria-expanded="false" aria-controls="boqGroup${groupIndex}" onclick="event.preventDefault();">
                        ${groupName} (Group ${groupIndex + 1})
                    </button>
                    <div id="boqGroup${groupIndex}" class="collapse show">
                        <table class="table table-bordered">
                            <tbody id="boqTable${groupIndex}">
                                <!-- BOQ rows will be added here dynamically -->
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-right font-weight-bold">Group Total Cost:</td>
                                    <td><input id="groupTotalCost${groupIndex}" class="form-control form-control-lg" readonly /></td>
                                    <td></td>
                                </tr>
                                <tr>
                                    <td colspan="7" class="text-center">
                                        <button type="button" class="btn btn-secondary" onclick="addBOQRow(${groupIndex})">Add BOQ</button>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>`;
                container.insertAdjacentHTML('beforeend', newGroup);
            }
        }

        let globalBoqIndex = 0; // Global counter for unique indexes across all groups

        function addBOQRow(groupIndex) {
            const rowIndex = globalBoqIndex; // Use global index for unique BOQ indexing
            const row = 
                `<tr>
                    <td>${boqDivisions[groupIndex].boqs.length + 1}</td>
                    <td colspan="4">
                        <textarea name="BOQs[${rowIndex}].Name" class="form-control form-control-lg" placeholder="BOQ name"></textarea>
                    </td>
                </tr>
                <tr>
                    <td><input name="BOQs[${rowIndex}].Quantity" class="form-control form-control-lg" placeholder="quantity" oninput="calculateTotalCost()" /></td>
                    <td><input name="BOQs[${rowIndex}].Cost" class="form-control form-control-lg" placeholder="cost" oninput="calculateTotalCost()" /></td>
                    <td><input name="BOQs[${rowIndex}].Unit" class="form-control form-control-lg" placeholder="unit" /></td>
                    <td><input name="BOQs[${rowIndex}].TotalCost" class="form-control form-control-lg" placeholder="total cost" readonly /></td>
                    <td><button type="button" class="btn btn-danger" onclick="removeBoqRow(this, ${groupIndex})">Remove</button></td>
                </tr>`;

            document.getElementById(`boqTable${groupIndex}`).insertAdjacentHTML('beforeend', row);
            boqDivisions[groupIndex].boqs.push(rowIndex); // Store the global index in the group's boqs array
            globalBoqIndex++; // Increment global index
            calculateTotalCost();
        }

        function removeBoqRow(button, groupIndex) {
            const currentRow = button.closest('tr'); // Current row (quantity, cost, etc.)
            const previousRow = currentRow.previousElementSibling; // Previous row (BOQ name)

            // Remove both rows from the DOM
            if (previousRow) previousRow.remove();
            currentRow.remove();

            // Get the BOQ table for the specific group
            const boqTable = document.getElementById(`boqTable${groupIndex}`);

            // Recalculate indices for the group
            let globalIndex = 0;
            boqDivisions[groupIndex].boqs = []; // Reset BOQ indices for the group

            Array.from(boqTable.querySelectorAll('tr')).forEach((boqRow, idx) => {
                if (idx % 2 === 0) { // BOQ name rows (even indices)
                    boqRow.cells[0].textContent = idx / 2 + 1; // Update row number
                    boqRow.querySelector('textarea').name = `BOQs[${globalIndex}].Name`;
                } else { // Quantity, Cost, Unit, TotalCost rows (odd indices)
                    boqRow.querySelector('input[name*="Quantity"]').name = `BOQs[${globalIndex}].Quantity`;
                    boqRow.querySelector('input[name*="Cost"]').name = `BOQs[${globalIndex}].Cost`;
                    boqRow.querySelector('input[name*="Unit"]').name = `BOQs[${globalIndex}].Unit`;
                    boqRow.querySelector('input[name*="TotalCost"]').name = `BOQs[${globalIndex}].TotalCost`;
                    boqDivisions[groupIndex].boqs.push(globalIndex); // Update group's BOQs array
                    globalIndex++;
                }
            });

            // Recalculate totals
            calculateTotalCost();
        }



        function calculateTotalCost() {
            let grandTotal = 0;

            boqDivisions.forEach((division, groupIndex) => {
                let groupTotal = 0;
                division.boqs.forEach(boqIndex => {
                    const quantity = parseFloat(document.querySelector(`input[name="BOQs[${boqIndex}].Quantity"]`).value) || 0;
                    const cost = parseFloat(document.querySelector(`input[name="BOQs[${boqIndex}].Cost"]`).value) || 0;
                    const totalCost = quantity * cost;

                    document.querySelector(`input[name="BOQs[${boqIndex}].TotalCost"]`).value = totalCost.toFixed(2);
                    groupTotal += totalCost;
                });
                document.getElementById(`groupTotalCost${groupIndex}`).value = groupTotal.toFixed(2);
                grandTotal += groupTotal;
            });

            document.getElementById('grandTotalCost').value = grandTotal.toFixed(2);
        }


        let activityGroups = [];
        let globalActivityIndex = 0;

        function createActivityGroup() {
            const groupName = prompt("Enter Activity Group Name:");
            if (groupName) {
                const groupIndex = activityGroups.length;
                activityGroups.push({ name: groupName, activities: [] });

                const container = document.getElementById('activityContainer');
                const newGroup = `
                    <button class="btn btn-link font-weight-bold" data-toggle="collapse" data-target="#activityGroup${groupIndex}" aria-expanded="false" aria-controls="activityGroup${groupIndex}" onclick="event.preventDefault();">
                        ${groupName} (Group ${groupIndex + 1})
                    </button>
                    <div id="activityGroup${groupIndex}" class="collapse show">
                        <table class="table table-bordered">
                          
                            <tbody id="activityTable${groupIndex}">
                                <!-- Activity rows will be added here dynamically -->
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-secondary" onclick="addActivityRow(${groupIndex})">Add Activity</button>
                    </div>`;
                container.insertAdjacentHTML('beforeend', newGroup);
            }
        }

        function addActivityRow(groupIndex) {
            const rowIndex = globalActivityIndex; // Unique index
            const row = `
                <tr>
                    <td>${activityGroups[groupIndex].activities.length + 1}</td>
                    <td colspan="2">
                        <textarea name="Activities[${rowIndex}].Name" class="form-control form-control-lg" placeholder="Activity name"></textarea>
                    </td>
                </tr>
                <tr>
                    <td>
                        Start Date
                        <input type="date" name="Activities[${rowIndex}].StartDate" class="form-control" />
                    </td>
                    <td>
                        Finish Date
                        <input type="date" name="Activities[${rowIndex}].FinishDate" class="form-control" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="removeActivityRow(this, ${groupIndex})">Remove</button>
                    </td>
                </tr>
                            `;

            document.getElementById(`activityTable${groupIndex}`).insertAdjacentHTML('beforeend', row);
            activityGroups[groupIndex].activities.push(rowIndex); // Add global index to group
            globalActivityIndex++; // Increment global index
        }


        function removeActivityRow(button, groupIndex) {
            // Find the current row (dates row) to remove
            const row = button.closest('tr');

            // Get the previous row (activity name row)
            const previousRow = row.previousElementSibling;

            // Get the activity table for the specific group
            const activityTable = document.getElementById(`activityTable${groupIndex}`);

            // Remove both the current row and the previous row
            if (previousRow) previousRow.remove();
            row.remove();

            // Recalculate indices within the group
            let globalIndex = 0;
            activityGroups[groupIndex].activities = []; // Reset activities array for the group

            Array.from(activityTable.querySelectorAll('tr')).forEach((activityRow, idx) => {
                if (idx % 2 === 0) { // Activity name rows are even-indexed
                    activityRow.cells[0].textContent = idx / 2 + 1; // Update row number within the group
                    activityRow.querySelector('textarea').name = `Activities[${globalIndex}].Name`;
                } else { // Activity date rows are odd-indexed
                    activityRow.querySelector('input[name*="StartDate"]').name = `Activities[${globalIndex}].StartDate`;
                    activityRow.querySelector('input[name*="FinishDate"]').name = `Activities[${globalIndex}].FinishDate`;
                    activityGroups[groupIndex].activities.push(globalIndex); // Update group's activities array
                    globalIndex++;
                }
            });
        }



        function submitForm() {
            const boqDivisionsJson = JSON.stringify(boqDivisions);
            document.getElementById("BoqDivisionsJson").value = boqDivisionsJson;

            const activityDivisionsJson = JSON.stringify(activityGroups);
            document.getElementById("ActivityDivisionsJson").value = activityDivisionsJson;
        }


        function removeTeamMember(button) {
            var teamMemberDiv = button.parentNode;
            teamMemberDiv.parentNode.removeChild(teamMemberDiv);
        }


        function removeRow(button) {
            var row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);
        }


    </script>
}